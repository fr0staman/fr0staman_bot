#![allow(unused)]

// Generated by diesel_ext
use chrono::NaiveDate;
use chrono::NaiveDateTime;
use diesel::prelude::*;

use crate::db::schema::*;

#[derive(Queryable, Debug)]
#[diesel(table_name = counter)]
pub struct Counter {
    pub id: i32,
    pub count: i32,
}

#[derive(Queryable, Selectable, Debug)]
#[diesel(table_name = game)]
pub struct Game {
    pub id: i32,
    pub uid: u32,
    pub group_id: i32,
    pub mass: i32,
    pub date: NaiveDate,
    pub name: String,
}

#[derive(Insertable, Debug)]
#[diesel(table_name = groups)]
pub struct NewGroup<'a> {
    pub chat_id: i64,
    pub date: NaiveDateTime,
    pub username: Option<&'a str>,
    pub title: &'a str,
}

#[derive(Queryable, Selectable, Debug)]
#[diesel(table_name = groups)]
pub struct Groups {
    pub id: i32,
    pub chat_id: i64,
    pub date: NaiveDateTime,
    pub settings: i8,
    pub top10_setting: i32,
    pub lang: Option<String>,
    pub active: bool,
    pub ig_id: Option<i32>,
    pub username: Option<String>,
    pub title: String,
}

#[derive(Queryable, AsChangeset)]
#[diesel(table_name = groups)]
pub struct UpdateGroups {
    // chat_id can be changed during migration to supergroup
    pub chat_id: i64,
    pub settings: i8,
    pub top10_setting: i32,
    pub lang: Option<String>,
    pub active: bool,
    // Dynamic linking to inline groups
    pub ig_id: Option<i32>,
    pub username: Option<String>,
    pub title: String,
}

// TODO: split models
impl Groups {
    #[allow(clippy::wrong_self_convention)]
    pub fn to_update(self) -> UpdateGroups {
        UpdateGroups {
            chat_id: self.chat_id,
            settings: self.settings,
            top10_setting: self.top10_setting,
            lang: self.lang,
            active: self.active,
            ig_id: self.ig_id,
            username: self.username,
            title: self.title,
        }
    }
}

#[derive(Queryable, Selectable, Debug)]
#[diesel(table_name = hryak_day)]
pub struct HryakDay {
    pub id: i32,
    pub iug_id: i32,
    pub date: NaiveDate,
}

#[derive(Queryable, Selectable, Identifiable, Debug)]
#[diesel(table_name = inline_groups)]
pub struct InlineGroup {
    pub id: i32,
    pub chat_instance: i64,
    pub invited_at: NaiveDateTime,
}

#[derive(Queryable, Selectable, Identifiable, Debug)]
#[diesel(table_name = inline_users)]
pub struct InlineUser {
    pub id: i32,
    pub uid: u32,
    pub weight: i32,
    pub date: NaiveDate,
    pub flag: String,
    pub win: u16,
    pub rout: u16,
    pub name: String,
    pub gifted: bool,
}

#[derive(Queryable, Selectable, Identifiable, Debug)]
#[diesel(table_name = inline_users_groups)]
pub struct InlineUsersGroup {
    pub id: i32,
    pub iu_id: i32,
    pub ig_id: i32,
}

#[derive(Insertable)]
#[diesel(table_name = inline_users)]
pub struct NewInlineUser<'a> {
    pub uid: u32,
    pub weight: i32,
    pub date: NaiveDate,
    pub flag: &'a str,
    pub name: &'a str,
}

#[derive(Queryable)]
#[diesel(table_name = inline_users)]
pub struct UpdateInlineUser {
    pub id: i32,
    pub weight: i32,
    pub date: NaiveDate,
    pub gifted: bool,
}

#[derive(Queryable, Selectable, Debug)]
#[diesel(table_name = inline_voices)]
pub struct InlineVoice {
    pub id: i16,
    pub url: String,
    pub uid: u32,
    pub caption: String,
    pub status: i16,
}

#[derive(Queryable, Selectable, Debug)]
#[diesel(table_name = inline_gifs)]
pub struct InlineGif {
    pub id: i16,
    pub file_id: String,
    pub file_unique_id: String,
    pub uid: u32,
    pub status: i16,
}

#[derive(Insertable, Debug)]
#[diesel(table_name = users)]
pub struct NewUser<'a> {
    pub user_id: u64,
    pub started: bool,
    pub created_at: NaiveDateTime,
    pub username: Option<&'a str>,
    pub first_name: &'a str,
    pub last_name: Option<&'a str>,
}

#[derive(Queryable, Selectable, Debug)]
#[diesel(table_name = users)]
pub struct User {
    pub id: u32,
    pub user_id: u64,
    pub started: bool,
    pub banned: bool,
    pub supported: bool,
    pub subscribed: bool,
    pub created_at: NaiveDateTime,
    pub lang: Option<String>,
    pub username: Option<String>,
    pub first_name: String,
    pub last_name: Option<String>,
}

#[derive(Queryable, AsChangeset)]
#[diesel(table_name = users)]
pub struct UpdateUser {
    pub started: bool,
    pub banned: bool,
    pub supported: bool,
    pub subscribed: bool,
    pub lang: Option<String>,
    pub username: Option<String>,
    pub first_name: String,
    pub last_name: Option<String>,
}

// TODO: split models
impl User {
    #[allow(clippy::wrong_self_convention)]
    pub fn to_update(self) -> UpdateUser {
        UpdateUser {
            started: self.started,
            banned: self.banned,
            supported: self.supported,
            subscribed: self.subscribed,
            lang: self.lang,
            username: self.username,
            first_name: self.first_name,
            last_name: self.last_name,
        }
    }
}

#[derive(Queryable, AsChangeset)]
#[diesel(table_name = users)]
pub struct UserStatus {
    pub started: bool,
    pub banned: bool,
    pub supported: bool,
    pub subscribed: bool,
}

#[derive(Queryable, Selectable, Debug)]
#[diesel(table_name = grow_log)]
pub struct GrowLog {
    pub id: u32,
    pub game_id: i32,
    pub created_at: NaiveDateTime,
    pub weight_change: i32,
    pub current_weight: u32,
}

#[derive(Insertable, Debug)]
#[diesel(table_name = grow_log)]
pub struct GrowLogAdd {
    pub game_id: i32,
    pub created_at: NaiveDateTime,
    pub weight_change: i32,
    pub current_weight: u32,
}

#[derive(Queryable, Selectable, Debug)]
#[diesel(table_name = achievements_users)]
pub struct AchievementUser {
    pub id: u32,
    pub game_id: i32,
    pub code: u8,
    pub created_at: NaiveDateTime,
}

#[derive(Insertable, Debug)]
#[diesel(table_name = achievements_users)]
pub struct AchievementUserAdd {
    pub game_id: i32,
    pub code: u8,
    pub created_at: NaiveDateTime,
}
